var server = require('webserver').create(),
    fs = require('fs');

function WebServer() {
    return {
        port: 8081,
        /*
        * returns mime-type according to file extension
        */
        getResourceType: function (file) {
            var type = '';
            var extensionPttrn = /\.([0-9a-z]+)(?:[\?#]|$)/i;
            var extension = file.match(extensionPttrn);
            if (extension && extension.length) {
                extension = extension[0];
            }
            switch (extension) {
                case 'html': type = 'text/html'; break;
                case 'js': type = 'application/x-javascript'; break;
                case 'json': type = 'application/x-javascript'; break;
                case 'css': type = 'text/css'; break;
                case 'jpg': type = 'image/jpg'; break;
                case 'png': type = 'image/png'; break;
                case 'gif': type = 'image/gif'; break;
                default: type = '';
            }
            return type;
        },

        shouldSkipRead: function (file) {
            return file.indexOf('ping') != -1 || file.indexOf('ico') != -1 || file.indexOf('usages') != -1;
        },

        listen: function (errorCallback) {
            var me = this;
            var listening = server.listen(this.port, function (request, response) {
                try {
                    // get requested file name
                    var path = (request.url.slice(1)).replace(/[\\\/]/g, fs.separator),
                        path = decodeURIComponent(path),
                        type = me.getResourceType(path);
                    response.headers = { "Cache": "no-cache", "Content-Type": type };

                    var paramsIdx = path.indexOf('?'),
                        hasParams = paramsIdx != -1,
                        filePath = hasParams ? path.substring(0, paramsIdx) : path,
                        params = hasParams ? path.substring(paramsIdx) : null,
                        skipRead = me.shouldSkipRead(filePath);

                    if (hasParams != -1) {
                        //getEntityId();
                        //var extensionIdx = path.lastIndexOf('.');
                        //var directoryPath = path.substring(0, extensionIdx);
                        //console.log(directoryPath);

                        //console.log('Directory exists:' + fs.existsSync(directoryPath));
                    }

                    if (!skipRead && !fs.exists(filePath)) {
                        console.log('file not exits: ' + filePath);
                        response.statusCode = 404;
                        response.write('');
                        response.close();
                        return;
                    }

                    if (skipRead) {
                        response.write("\"OK\"");
                    } else {
                        response.statusCode = 200;
                        var content = fs.read(filePath);
                        response.write(content);
                    }
                    response.close();
                } catch (e) {
                    console.log('er');
                    errorCallback(e);
                }
            });

            var result = {
                success: listening,
                port: this.port
            };
            return result;
        }
    }
};

module.exports = WebServer;